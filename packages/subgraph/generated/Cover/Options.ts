// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Create extends ethereum.Event {
  get params(): Create__Params {
    return new Create__Params(this);
  }
}

export class Create__Params {
  _event: Create;

  constructor(event: Create) {
    this._event = event;
  }

  get optionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get fee(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get premium(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Exchange extends ethereum.Event {
  get params(): Exchange__Params {
    return new Exchange__Params(this);
  }
}

export class Exchange__Params {
  _event: Exchange;

  constructor(event: Exchange) {
    this._event = event;
  }

  get optionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get paymentToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get inputAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get poolToken(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get outputAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Exercise extends ethereum.Event {
  get params(): Exercise__Params {
    return new Exercise__Params(this);
  }
}

export class Exercise__Params {
  _event: Exercise;

  constructor(event: Exercise) {
    this._event = event;
  }

  get optionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get exchangeAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Expire extends ethereum.Event {
  get params(): Expire__Params {
    return new Expire__Params(this);
  }
}

export class Expire__Params {
  _event: Expire;

  constructor(event: Expire) {
    this._event = event;
  }

  get optionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SetUniswapRouter extends ethereum.Event {
  get params(): SetUniswapRouter__Params {
    return new SetUniswapRouter__Params(this);
  }
}

export class SetUniswapRouter__Params {
  _event: SetUniswapRouter;

  constructor(event: SetUniswapRouter) {
    this._event = event;
  }

  get uniswapRouter(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Options__getOptionInfoResult {
  value0: Address;
  value1: i32;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: Address,
    value1: i32,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }
}

export class Options__optionsResult {
  value0: i32;
  value1: i32;
  value2: Address;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;

  constructor(
    value0: i32,
    value1: i32,
    value2: Address,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }
}

export class Options extends ethereum.SmartContract {
  static bind(address: Address): Options {
    return new Options("Options", address);
  }

  create(
    duration: BigInt,
    amount: BigInt,
    strikePrice: BigInt,
    optionType: i32
  ): BigInt {
    let result = super.call(
      "create",
      "create(uint256,uint256,uint256,uint8):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(duration),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(strikePrice),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(optionType))
      ]
    );

    return result[0].toBigInt();
  }

  try_create(
    duration: BigInt,
    amount: BigInt,
    strikePrice: BigInt,
    optionType: i32
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "create",
      "create(uint256,uint256,uint256,uint8):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(duration),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(strikePrice),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(optionType))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createATM(duration: BigInt, amount: BigInt, optionType: i32): BigInt {
    let result = super.call(
      "createATM",
      "createATM(uint256,uint256,uint8):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(duration),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(optionType))
      ]
    );

    return result[0].toBigInt();
  }

  try_createATM(
    duration: BigInt,
    amount: BigInt,
    optionType: i32
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createATM",
      "createATM(uint256,uint256,uint8):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(duration),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(optionType))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  exercise(optionID: BigInt): BigInt {
    let result = super.call("exercise", "exercise(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(optionID)
    ]);

    return result[0].toBigInt();
  }

  try_exercise(optionID: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("exercise", "exercise(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(optionID)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  fees(): BigInt {
    let result = super.call("fees", "fees():(uint256)", []);

    return result[0].toBigInt();
  }

  try_fees(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("fees", "fees():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOptionInfo(optionID: BigInt): Options__getOptionInfoResult {
    let result = super.call(
      "getOptionInfo",
      "getOptionInfo(uint256):(address,uint8,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(optionID)]
    );

    return new Options__getOptionInfoResult(
      result[0].toAddress(),
      result[1].toI32(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt()
    );
  }

  try_getOptionInfo(
    optionID: BigInt
  ): ethereum.CallResult<Options__getOptionInfoResult> {
    let result = super.tryCall(
      "getOptionInfo",
      "getOptionInfo(uint256):(address,uint8,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(optionID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Options__getOptionInfoResult(
        value[0].toAddress(),
        value[1].toI32(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt()
      )
    );
  }

  getOptionsCount(): BigInt {
    let result = super.call(
      "getOptionsCount",
      "getOptionsCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getOptionsCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getOptionsCount",
      "getOptionsCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  options(param0: BigInt): Options__optionsResult {
    let result = super.call(
      "options",
      "options(uint256):(uint8,uint8,address,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Options__optionsResult(
      result[0].toI32(),
      result[1].toI32(),
      result[2].toAddress(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt()
    );
  }

  try_options(param0: BigInt): ethereum.CallResult<Options__optionsResult> {
    let result = super.tryCall(
      "options",
      "options(uint256):(uint8,uint8,address,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Options__optionsResult(
        value[0].toI32(),
        value[1].toI32(),
        value[2].toAddress(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt()
      )
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paymentToken(): Address {
    let result = super.call("paymentToken", "paymentToken():(address)", []);

    return result[0].toAddress();
  }

  try_paymentToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("paymentToken", "paymentToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pool(): Address {
    let result = super.call("pool", "pool():(address)", []);

    return result[0].toAddress();
  }

  try_pool(): ethereum.CallResult<Address> {
    let result = super.tryCall("pool", "pool():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  poolToken(): Address {
    let result = super.call("poolToken", "poolToken():(address)", []);

    return result[0].toAddress();
  }

  try_poolToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("poolToken", "poolToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  uniswapRouter(): Address {
    let result = super.call("uniswapRouter", "uniswapRouter():(address)", []);

    return result[0].toAddress();
  }

  try_uniswapRouter(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "uniswapRouter",
      "uniswapRouter():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get poolToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _paymentToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get liquidityPoolFactory(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateCall extends ethereum.Call {
  get inputs(): CreateCall__Inputs {
    return new CreateCall__Inputs(this);
  }

  get outputs(): CreateCall__Outputs {
    return new CreateCall__Outputs(this);
  }
}

export class CreateCall__Inputs {
  _call: CreateCall;

  constructor(call: CreateCall) {
    this._call = call;
  }

  get duration(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get strikePrice(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get optionType(): i32 {
    return this._call.inputValues[3].value.toI32();
  }
}

export class CreateCall__Outputs {
  _call: CreateCall;

  constructor(call: CreateCall) {
    this._call = call;
  }

  get optionID(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreateATMCall extends ethereum.Call {
  get inputs(): CreateATMCall__Inputs {
    return new CreateATMCall__Inputs(this);
  }

  get outputs(): CreateATMCall__Outputs {
    return new CreateATMCall__Outputs(this);
  }
}

export class CreateATMCall__Inputs {
  _call: CreateATMCall;

  constructor(call: CreateATMCall) {
    this._call = call;
  }

  get duration(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get optionType(): i32 {
    return this._call.inputValues[2].value.toI32();
  }
}

export class CreateATMCall__Outputs {
  _call: CreateATMCall;

  constructor(call: CreateATMCall) {
    this._call = call;
  }

  get optionID(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ExerciseCall extends ethereum.Call {
  get inputs(): ExerciseCall__Inputs {
    return new ExerciseCall__Inputs(this);
  }

  get outputs(): ExerciseCall__Outputs {
    return new ExerciseCall__Outputs(this);
  }
}

export class ExerciseCall__Inputs {
  _call: ExerciseCall;

  constructor(call: ExerciseCall) {
    this._call = call;
  }

  get optionID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ExerciseCall__Outputs {
  _call: ExerciseCall;

  constructor(call: ExerciseCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetUniswapRouterCall extends ethereum.Call {
  get inputs(): SetUniswapRouterCall__Inputs {
    return new SetUniswapRouterCall__Inputs(this);
  }

  get outputs(): SetUniswapRouterCall__Outputs {
    return new SetUniswapRouterCall__Outputs(this);
  }
}

export class SetUniswapRouterCall__Inputs {
  _call: SetUniswapRouterCall;

  constructor(call: SetUniswapRouterCall) {
    this._call = call;
  }

  get _uniswapRouter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetUniswapRouterCall__Outputs {
  _call: SetUniswapRouterCall;

  constructor(call: SetUniswapRouterCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnlockCall extends ethereum.Call {
  get inputs(): UnlockCall__Inputs {
    return new UnlockCall__Inputs(this);
  }

  get outputs(): UnlockCall__Outputs {
    return new UnlockCall__Outputs(this);
  }
}

export class UnlockCall__Inputs {
  _call: UnlockCall;

  constructor(call: UnlockCall) {
    this._call = call;
  }

  get optionID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UnlockCall__Outputs {
  _call: UnlockCall;

  constructor(call: UnlockCall) {
    this._call = call;
  }
}

export class UnlockManyCall extends ethereum.Call {
  get inputs(): UnlockManyCall__Inputs {
    return new UnlockManyCall__Inputs(this);
  }

  get outputs(): UnlockManyCall__Outputs {
    return new UnlockManyCall__Outputs(this);
  }
}

export class UnlockManyCall__Inputs {
  _call: UnlockManyCall;

  constructor(call: UnlockManyCall) {
    this._call = call;
  }

  get optionIDs(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class UnlockManyCall__Outputs {
  _call: UnlockManyCall;

  constructor(call: UnlockManyCall) {
    this._call = call;
  }
}
