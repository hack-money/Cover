// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class OptionCreation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save OptionCreation entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save OptionCreation entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("OptionCreation", id.toString(), this);
  }

  static load(id: string): OptionCreation | null {
    return store.get("OptionCreation", id) as OptionCreation | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get holder(): Bytes {
    let value = this.get("holder");
    return value.toBytes();
  }

  set holder(value: Bytes) {
    this.set("holder", Value.fromBytes(value));
  }

  get fee(): BigInt {
    let value = this.get("fee");
    return value.toBigInt();
  }

  set fee(value: BigInt) {
    this.set("fee", Value.fromBigInt(value));
  }

  get premium(): BigInt {
    let value = this.get("premium");
    return value.toBigInt();
  }

  set premium(value: BigInt) {
    this.set("premium", Value.fromBigInt(value));
  }
}

export class OptionExercise extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save OptionExercise entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save OptionExercise entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("OptionExercise", id.toString(), this);
  }

  static load(id: string): OptionExercise | null {
    return store.get("OptionExercise", id) as OptionExercise | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get exchangeAmout(): BigInt {
    let value = this.get("exchangeAmout");
    return value.toBigInt();
  }

  set exchangeAmout(value: BigInt) {
    this.set("exchangeAmout", Value.fromBigInt(value));
  }
}

export class OptionExpiry extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save OptionExpiry entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save OptionExpiry entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("OptionExpiry", id.toString(), this);
  }

  static load(id: string): OptionExpiry | null {
    return store.get("OptionExpiry", id) as OptionExpiry | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }
}
